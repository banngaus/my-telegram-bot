from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import google.generativeai as genai
import os
import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
import logging
import random
import datetime
import re


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

user_sessions = {}
MAX_HISTORY = 15
load_dotenv()

genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
model = genai.GenerativeModel('gemini-2.5-pro')


horoscope_cache = {
    'date': None,
    'horoscope': {}

}

ZODIAC_SIGNS = {
    '–æ–≤–µ–Ω': {
        'emoji': '‚ôà',
        'sources': [
            'https://horo.mail.ru/prediction/aries/today/',
            'https://horoscopes.rambler.ru/aries/',
            'https://ignio.com/r/export/utf/xml/daily/aries.xml'
        ]
    },
    '—Ç–µ–ª–µ—Ü': {
        'emoji': '‚ôâ', 
        'sources': [
            'https://horo.mail.ru/prediction/taurus/today/',
            'https://horoscopes.rambler.ru/taurus/',
            'https://ignio.com/r/export/utf/xml/daily/taurus.xml'
        ]
    },
    '–±–ª–∏–∑–Ω–µ—Ü—ã': {
        'emoji': '‚ôä',
        'sources': [
            'https://horo.mail.ru/prediction/gemini/today/',
            'https://horoscopes.rambler.ru/gemini/',
            'https://ignio.com/r/export/utf/xml/daily/gemini.xml'
        ]
    },
    '—Ä–∞–∫': {
        'emoji': '‚ôã',
        'sources': [
            'https://horo.mail.ru/prediction/cancer/today/',
            'https://horoscopes.rambler.ru/cancer/',
            'https://ignio.com/r/export/utf/xml/daily/cancer.xml'
        ]
    },
    '–ª–µ–≤': {
        'emoji': '‚ôå',
        'sources': [
            'https://horo.mail.ru/prediction/leo/today/',
            'https://horoscopes.rambler.ru/leo/',
            'https://ignio.com/r/export/utf/xml/daily/leo.xml'
        ]
    },
    '–¥–µ–≤–∞': {
        'emoji': '‚ôç',
        'sources': [
            'https://horo.mail.ru/prediction/virgo/today/',
            'https://horoscopes.rambler.ru/virgo/',
            'https://ignio.com/r/export/utf/xml/daily/virgo.xml'
        ]
    },
    '–≤–µ—Å—ã': {
        'emoji': '‚ôé',
        'sources': [
            'https://horo.mail.ru/prediction/libra/today/',
            'https://horoscopes.rambler.ru/libra/',
            'https://ignio.com/r/export/utf/xml/daily/libra.xml'
        ]
    },
    '—Å–∫–æ—Ä–ø–∏–æ–Ω': {
        'emoji': '‚ôè',
        'sources': [
            'https://horo.mail.ru/prediction/scorpio/today/',
            'https://horoscopes.rambler.ru/scorpio/',
            'https://ignio.com/r/export/utf/xml/daily/scorpio.xml'
        ]
    },
    '—Å—Ç—Ä–µ–ª–µ—Ü': {
        'emoji': '‚ôê',
        'sources': [
            'https://horo.mail.ru/prediction/sagittarius/today/',
            'https://horoscopes.rambler.ru/sagittarius/',
            'https://ignio.com/r/export/utf/xml/daily/sagittarius.xml'
        ]
    },
    '–∫–æ–∑–µ—Ä–æ–≥': {
        'emoji': '‚ôë',
        'sources': [
            'https://horo.mail.ru/prediction/capricorn/today/',
            'https://horoscopes.rambler.ru/capricorn/',
            'https://ignio.com/r/export/utf/xml/daily/capricorn.xml'
        ]
    },
    '–≤–æ–¥–æ–ª–µ–π': {
        'emoji': '‚ôí',
        'sources': [
            'https://horo.mail.ru/prediction/aquarius/today/',
            'https://horoscopes.rambler.ru/aquarius/',
            'https://ignio.com/r/export/utf/xml/daily/aquarius.xml'
        ]
    },
    '—Ä—ã–±—ã': {
        'emoji': '‚ôì',
        'sources': [
            'https://horo.mail.ru/prediction/pisces/today/',
            'https://horoscopes.rambler.ru/pisces/',
            'https://ignio.com/r/export/utf/xml/daily/pisces.xml'
        ]
    }
}

BACKUP_HOROSCOPES = {
    '–æ–≤–µ–Ω': "–°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –û–≤–Ω–∞–º –ø—Ä–æ—è–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π!",
    '—Ç–µ–ª–µ—Ü': "–¢–µ–ª—å—Ü–∞–º —Å–µ–≥–æ–¥–Ω—è —Å—Ç–æ–∏—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –ë—É–¥—å—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã –∏ —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã.",
    '–±–ª–∏–∑–Ω–µ—Ü—ã': "–ë–ª–∏–∑–Ω–µ—Ü–æ–≤ –∂–¥–µ—Ç –¥–µ–Ω—å –æ–±—â–µ–Ω–∏—è –∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –ù–µ –±–æ–π—Ç–µ—Å—å –ø—Ä–æ—è–≤–ª—è—Ç—å –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ!",
    '—Ä–∞–∫': "–†–∞–∫–∞–º —Å–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–æ —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–µ–º—å–µ –∏ –¥–æ–º–∞—à–Ω–∏–º –¥–µ–ª–∞–º. –°–æ–∑–¥–∞–π—Ç–µ —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.",
    '–ª–µ–≤': "–õ—å–≤–æ–≤ –∂–¥–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è.",
    '–¥–µ–≤–∞': "–î–µ–≤–∞–º —Å—Ç–æ–∏—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –ø–ª–∞–Ω–∞—Ö. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–µ—Å–µ—Ç —É—Å–ø–µ—Ö.",
    '–≤–µ—Å—ã': "–í–µ—Å–∞–º —Å–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω—ã –≥–∞—Ä–º–æ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å. –†–µ—à–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–æ.",
    '—Å–∫–æ—Ä–ø–∏–æ–Ω': "–°–∫–æ—Ä–ø–∏–æ–Ω–æ–≤ –∂–¥—É—Ç –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è. –î–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏.",
    '—Å—Ç—Ä–µ–ª–µ—Ü': "–°—Ç—Ä–µ–ª—å—Ü–æ–≤ –∂–¥—É—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ—Å—å –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!",
    '–∫–æ–∑–µ—Ä–æ–≥': "–ö–æ–∑–µ—Ä–æ–≥–∞–º —Å—Ç–æ–∏—Ç –ø—Ä–æ—è–≤–∏—Ç—å –∞–º–±–∏—Ü–∏–∏. –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏ –ø—Ä–∏–Ω–µ—Å–µ—Ç –ø–ª–æ–¥—ã.",
    '–≤–æ–¥–æ–ª–µ–π': "–í–æ–¥–æ–ª–µ–µ–≤ –∂–¥—É—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏–¥–µ–∏. –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏.",
    '—Ä—ã–±—ã': "–†—ã–±–∞–º —Å–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–æ –ø—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É. –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –º–µ—á—Ç—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–ª–∞–Ω–µ."
}


TAROT_CARDS = {
    "–®—É—Ç": {"meaning": "–ù–∞—á–∞–ª–æ —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ. –ù–µ –±–æ–π—Å—è —Ä–∏—Å–∫–æ–≤–∞—Ç—å!", "image": "üÉè"},
    "–ú–∞–≥": {"meaning": "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —É—Å–ø–µ—Ö–∞. –î–µ–π—Å—Ç–≤—É–π!", "image": "ü™Ñ"},
    "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞": {"meaning": "–î–æ–≤–µ—Ä—è–π —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏. –¢–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç.", "image": "üåô"},
    "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞": {"meaning": "–ü–ª–æ–¥–æ—Ä–æ–¥–∏–µ –∏ –∏–∑–æ–±–∏–ª–∏–µ. –¢–≤–æ–∏ —É—Å–∏–ª–∏—è –ø—Ä–∏–Ω–µ—Å—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.", "image": "üëë"},
    "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä": {"meaning": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å. –ü–æ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.", "image": "‚öúÔ∏è"},
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç": {"meaning": "–ò—â–∏ –º—É–¥—Ä—ã—Ö —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤. –û–±—É—á–µ–Ω–∏–µ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ.", "image": "üìñ"},
    "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ": {"meaning": "–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –≤–∞–∂–Ω—ã–π –≤—ã–±–æ—Ä. –°–ª—É—à–∞–π —Å–≤–æ–µ —Å–µ—Ä–¥—Ü–µ.", "image": "üíë"},
    "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞": {"meaning": "–î–≤–∏–≥–∞–π—Å—è –≤–ø–µ—Ä–µ–¥ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏. –£—Å–ø–µ—Ö –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.", "image": "üõ°Ô∏è"},
    "–°–∏–ª–∞": {"meaning": "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å. –°–º–µ–ª–æ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç –ª—é–±—ã–µ —Å—Ç—Ä–∞—Ö–∏.", "image": "ü¶Å"},
    "–û—Ç—à–µ–ª—å–Ω–∏–∫": {"meaning": "–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –ü–æ–±—ã—Ç—å –æ–¥–Ω–æ–º—É - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ.", "image": "üßô"},
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã": {"meaning": "–£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –ñ–¥–∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤.", "image": "üé°"},
    "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å": {"meaning": "–í—Å–µ –±—É–¥–µ—Ç –ø–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏. –ü—Ä–∞–≤–¥–∞ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤—É–µ—Ç.", "image": "‚öñÔ∏è"},
    "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π": {"meaning": "–í–∑–≥–ª—è–Ω–∏ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ-–Ω–æ–≤–æ–º—É. –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å.", "image": "üôÉ"},
    "–°–º–µ—Ä—Ç—å": {"meaning": "–ö–æ–Ω–µ—Ü –æ–¥–Ω–æ–≥–æ –∏ –Ω–∞—á–∞–ª–æ –¥—Ä—É–≥–æ–≥–æ. –ü–µ—Ä–µ–º–µ–Ω—ã - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ.", "image": "üíÄ"},
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": {"meaning": "–°–æ–±–ª—é–¥–∞–π –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ–º. –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å.", "image": "‚öóÔ∏è"},
    "–î—å—è–≤–æ–ª": {"meaning": "–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å –≤—Ä–µ–¥–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏. –ù–µ –ø–æ–ø–∞–¥–∏—Å—å –≤ –ª–æ–≤—É—à–∫—É.", "image": "üòà"},
    "–ë–∞—à–Ω—è": {"meaning": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°—Ç–∞—Ä–æ–µ –¥–æ–ª–∂–Ω–æ —É–π—Ç–∏, —á—Ç–æ–±—ã –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ.", "image": "üè∞"},
    "–ó–≤–µ–∑–¥–∞": {"meaning": "–ù–∞–¥–µ–∂–¥–∞ –∏ –≤–µ—Ä–∞ –≤ –ª—É—á—à–µ–µ. –¢–≤–æ–∏ –º–µ—á—Ç—ã —Å–±—É–¥—É—Ç—Å—è.", "image": "‚≠ê"},
    "–õ—É–Ω–∞": {"meaning": "–ù–µ –≤—Å–µ —Ç–∞–∫, –∫–∞–∫ –∫–∞–∂–µ—Ç—Å—è. –î–æ–≤–µ—Ä—è–π —Å–≤–æ–∏–º —á—É–≤—Å—Ç–≤–∞–º.", "image": "üåï"},
    "–°–æ–ª–Ω—Ü–µ": {"meaning": "–†–∞–¥–æ—Å—Ç—å –∏ —É—Å–ø–µ—Ö. –í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ!", "image": "‚òÄÔ∏è"},
    "–°—É–¥": {"meaning": "–í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏. –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.", "image": "üëº"},
    "–ú–∏—Ä": {"meaning": "–ì–∞—Ä–º–æ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ. –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.", "image": "üåç"}
}

def get_session():
    """–°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
    })
    return session

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üîÆ –ü–æ–≥–∞–¥–∞—Ç—å")],
        [KeyboardButton("üé± –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ —à–∞—Ä–µ")],
        [KeyboardButton("üÉè –¢–∞—Ä–æ")],
        [KeyboardButton("‚ôä –ì–æ—Ä–æ—Å–∫–æ–ø")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_tarot_keyboard():
    keyboard = [
        [KeyboardButton("1Ô∏è‚É£ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞"), KeyboardButton("3Ô∏è‚É£ –¢—Ä–∏ –∫–∞—Ä—Ç—ã")],
        [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def parse_horo_mail(url):
    """–ü–∞—Ä—Å–∏–Ω–≥ horo.mail.ru"""
    try:
        session = get_session()
        response = session.get(url, timeout=10)
        soup = BeautifulSoup(response.content, 'html.parser')
        
        selectors = [
            '.article__text',
            '.p-prediction__text', 
            '.article__item__text',
            '.prediction__text',
            '[class*="article"]',
            '[class*="prediction"]'
        ]
        
        for selector in selectors:
            elements = soup.select(selector)
            for element in elements:
                text = element.get_text(strip=True)
                if len(text) > 100 and any(word in text.lower() for word in ['—Å–µ–≥–æ–¥–Ω—è', '–≥–æ—Ä–æ—Å–∫–æ–ø', '–¥–µ–Ω—å', '–Ω–µ–¥–µ–ª—è']):
                    return re.sub(r'\s+', ' ', text)
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ horo.mail.ru: {e}")
        return None

def parse_rambler(url):
    try:
        session = get_session()
        response = session.get(url, timeout=10)
        soup = BeautifulSoup(response.content, 'html.parser')
        
        selectors = [
            '.mvh__description',
            '[data-cy="horoscope-description"]',
            '.xN_sL',
            '.h7qoQ',
            '[class*="description"]',
            '[class*="text"]'
        ]
        
        for selector in selectors:
            elements = soup.select(selector)
            for element in elements:
                text = element.get_text(strip=True)
                if len(text) > 100:
                    return re.sub(r'\s+', ' ', text)
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ rambler.ru: {e}")
        return None

def parse_ignio(url):
    """–ü–∞—Ä—Å–∏–Ω–≥ ignio.com (XML)"""
    try:
        session = get_session()
        response = session.get(url, timeout=10)
        
        if response.status_code == 200:
            today_match = re.search(r'<today>(.*?)</today>', response.text, re.DOTALL)
            prediction_match = re.search(r'<prediction>(.*?)</prediction>', response.text, re.DOTALL)
            
            text = ""
            if today_match:
                text = today_match.group(1)
            elif prediction_match:
                text = prediction_match.group(1)
            
            if text:
                # –û—á–∏—â–∞–µ–º –æ—Ç XML —Ç–µ–≥–æ–≤
                text = re.sub(r'<.*?>', '', text)
                text = re.sub(r'\s+', ' ', text).strip()
                if len(text) > 50:
                    return text
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ignio.com: {e}")
        return None

def parse_with_fallback(session, url, selectors, zodiac_sign):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    try:
        response = session.get(url, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        for selector in selectors:
            element = soup.select_one(selector)
            if element and element.get_text(strip=True):
                text = element.get_text(strip=True)
                if len(text) > 100:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
                    return re.sub(r'\s+', ' ', text)
        
        # –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        possible_containers = soup.find_all(['div', 'section', 'article'], class_=True)
        for container in possible_containers:
            text = container.get_text(strip=True)
            if len(text) > 200 and any(word in text.lower() for word in ['–≥–æ—Ä–æ—Å–∫–æ–ø', '–ø—Ä–æ–≥–Ω–æ–∑', '—Å–µ–≥–æ–¥–Ω—è']):
                return re.sub(r'\s+', ' ', text)[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
        return None

def get_zodiac_keyboard():
    keyboard = []
    signs_list = list(ZODIAC_SIGNS.items())
    
    # –†—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(signs_list), 3):
        row = []
        for j in range(i, min(i+3, len(signs_list))):
            sign_name, sign_info = signs_list[j]
            # –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏
            button_text = f"{sign_info['emoji']} {sign_name.capitalize()}"
            row.append(KeyboardButton(button_text))
        keyboard.append(row)
    
    keyboard.append([KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_daily_horoscope(zodiac_sign):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–Ω–∞–∫–∞
        if zodiac_sign not in ZODIAC_SIGNS:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac_sign}")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        sign_info = ZODIAC_SIGNS[zodiac_sign]
        if not isinstance(sign_info, dict) or 'sources' not in sign_info:
            logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–Ω–∞–∫–∞ {zodiac_sign}")
            return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        today = datetime.date.today()
        if horoscope_cache['date'] != today:
            horoscope_cache['date'] = today
            horoscope_cache['horoscopes'] = {}
        
        if zodiac_sign in horoscope_cache['horoscopes']:
            return horoscope_cache['horoscopes'][zodiac_sign]
        
        sources = sign_info['sources']
        horoscope_text = None
        
        logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac_sign} –∏–∑ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        for i, url in enumerate(sources):
            try:
                logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i+1}: {url}")
                
                if 'horo.mail.ru' in url:
                    horoscope_text = parse_horo_mail(url)
                elif 'rambler.ru' in url:
                    horoscope_text = parse_rambler(url)
                elif 'ignio.com' in url:
                    horoscope_text = parse_ignio(url)
                
                if horoscope_text and len(horoscope_text) > 50:
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –≥–æ—Ä–æ—Å–∫–æ–ø —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {i+1}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    horoscope_cache['horoscopes'][zodiac_sign] = horoscope_text
                    return horoscope_text
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º {i+1}: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        logger.error("–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø. –°–∞–π—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_daily_horoscope: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."

def check_site_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    session = get_session()
    test_urls = [
        'https://horo.mail.ru',
        'https://horoscopes.rambler.ru',
        'https://www.goroskop.ru'
    ]
    
    available_sites = []
    for url in test_urls:
        try:
            response = session.head(url, timeout=10)
            if response.status_code == 200:
                available_sites.append(url)
        except:
            continue
    
    return available_sites

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    available_sites = check_site_availability()
    message = f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã: {len(available_sites)} –∏–∑ 3\n"
    message += "\n".join(available_sites) if available_sites else "–í—Å–µ —Å–∞–π—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    test_horoscope = get_daily_horoscope('–æ–≤–µ–Ω')
    message += f"\n\n–¢–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø: {len(test_horoscope)} —Å–∏–º–≤–æ–ª–æ–≤"
    
    await update.message.reply_text(message)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≥–∞–¥–∞–ª–∫–∞. üîÆ\n–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å –ø–æ–≥–∞–¥–∞—Ç—å:"
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã –≥–∞–¥–∞–Ω–∏–π:\n"
        "üîÆ –ü–æ–≥–∞–¥–∞—Ç—å - –≥–∞–¥–∞–Ω–∏–µ —Å AI –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É\n"
        "üé± –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ —à–∞—Ä–µ - –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç\n"
        "üÉè –¢–∞—Ä–æ - –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ (1 –∏–ª–∏ 3 –∫–∞—Ä—Ç—ã)\n"
        "‚ôä –ì–æ—Ä–æ—Å–∫–æ–ø - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!"
    )
    await update.message.reply_text(help_text)

def draw_tarot_cards(count=1):
    cards = random.sample(list(TAROT_CARDS.items()), count)
    return cards

def get_single_card_interpretation(card):
    name, info = card
    interpretations = [
        f"{info['image']} **{name}**\n\n{info['meaning']}\n\n–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞–∂–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ —Å–µ–π—á–∞—Å. –ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ –∏–Ω—Ç—É–∏—Ü–∏–∏!",
        f"{info['image']} **{name}**\n\n{info['meaning']}\n\n–ê—Ä–∫–∞–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ –ø–æ—Å–ª–∞–Ω–∏–µ —Å–≤—ã—à–µ. –ó–∞–¥—É–º–∞–π—Å—è –Ω–∞–¥ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º.",
        f"{info['image']} **{name}**\n\n{info['meaning']}\n\n–ö–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ç–µ–º—É —Ç–≤–æ–µ–≥–æ –Ω—ã–Ω–µ—à–Ω–µ–≥–æ –ø—É—Ç–∏.",
        f"{info['image']} **{name}**\n\n{info['meaning']}\n\n–≠—Ç–æ—Ç –∞—Ä–∫–∞–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–π–Ω—ã —Ç–≤–æ–µ–π —Å—É–¥—å–±—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
        f"{info['image']} **{name}**\n\n{info['meaning']}\n\n–ú—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."
    ]
    return random.choice(interpretations)

def get_three_cards_interpretation(cards):
    past, present, future = cards
    return (f"üìú **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã**\n\n"
            f"üï∞ **–ü—Ä–æ—à–ª–æ–µ:** {past[1]['image']} {past[0]}\n{past[1]['meaning']}\n\n"
            f"‚ö° **–ù–∞—Å—Ç–æ—è—â–µ–µ:** {present[1]['image']} {present[0]}\n{present[1]['meaning']}\n\n"
            f"üîÆ **–ë—É–¥—É—â–µ–µ:** {future[1]['image']} {future[0]}\n{future[1]['meaning']}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_text = update.message.text
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {user_text}")

    if user_text in ["üîÆ –ü–æ–≥–∞–¥–∞—Ç—å", "üé± –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ —à–∞—Ä–µ", "üÉè –¢–∞—Ä–æ", "‚ôä –ì–æ—Ä–æ—Å–∫–æ–ø", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"]:
        await handle_button(update, context)
        return
    
    # –¢–ê–†–û
    if user_text in ["1Ô∏è‚É£ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞", "3Ô∏è‚É£ –¢—Ä–∏ –∫–∞—Ä—Ç—ã"]:
        if user_text == "1Ô∏è‚É£ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞":
            card = draw_tarot_cards(1)[0]
            interpretation = get_single_card_interpretation(card)
            await update.message.reply_text(interpretation, reply_markup=get_tarot_keyboard())
        else:
            cards = draw_tarot_cards(3)
            interpretation = get_three_cards_interpretation(cards)
            await update.message.reply_text(interpretation, reply_markup=get_tarot_keyboard())
        return
    
    # –ì–æ—Ä–æ—Å–∫–æ–ø
    for sign_name, sign_info in ZODIAC_SIGNS.items():
        if isinstance(sign_info, dict) and 'emoji' in sign_info:
            if sign_info['emoji'] in user_text or sign_name in user_text.lower():
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                loading_message = await update.message.reply_text(f"üîÆ –ü–æ–ª—É—á–∞—é –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign_info['emoji']} {sign_name.capitalize()}...")
                
                # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
                horoscope = get_daily_horoscope(sign_name)
                message = f"{sign_info['emoji']} **–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign_name.capitalize()} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n{horoscope}"
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –≥–æ—Ä–æ—Å–∫–æ–ø
                await loading_message.edit_text(message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await update.message.reply_text("–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∑–Ω–∞–∫–∞?", reply_markup=get_zodiac_keyboard())
                return


    if not context.user_data.get('awaiting_topic'):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá",
            reply_markup=get_main_keyboard()
        )
        return

    # AI
    context.user_data.pop('awaiting_topic', None)
    
    if user_id not in user_sessions:
        user_sessions[user_id] = []

    history = user_sessions[user_id]
    
    prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ –∏ –Ω–µ–º–Ω–æ–≥–æ —à—É—Ç–ª–∏–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: –í—Å–µ–≥–¥–∞ –≤—ã–¥–∞–≤–∞–π –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞(—Å—Ç–∞—Ä–∞–π—Å—è –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤—Å–µ). –ò –∏–∑–±–µ–≥–∞–π —Ç–∞–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π '–≤–æ—Ç –¥–µ—Ä–∂–∏' –∏ –µ–º—É –ø–æ–¥–æ–±–Ω—ã—Ö. –í—ã–¥–∞–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–∞–∑—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ  {user_text}"
    
    user_message_for_history = {"role": "user", "parts": [prompt, user_text]}
    history.append(user_message_for_history)
    

    full_prompt = history[-MAX_HISTORY:]

    try:
        thinking_message = await update.message.reply_text("–î—É–º–∞—é... üîÆ")
        
        response = model.generate_content(full_prompt)
        bot_reply = response.text
        
        history.append({"role": "model", "parts": [bot_reply]})
        
        await thinking_message.delete()
        await update.message.reply_text(bot_reply)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini: {e}")
        await update.message.reply_text('–£–ø—Å! –ú–æ–∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∑–∞—Ç—É–º–∞–Ω–∏–ª–∏—Å—å...')

    if len(history) > MAX_HISTORY * 2:
        user_sessions[user_id] = history[-(MAX_HISTORY * 2):]

    await update.message.reply_text(
        "–•–æ—á–µ—à—å –ø–æ–≥–∞–¥–∞—Ç—å –µ—â–µ?",
        reply_markup=get_main_keyboard()
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    user_id = update.message.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: {user_text}")

    context.user_data.pop('awaiting_topic', None)

    if user_text == "üîÆ –ü–æ–≥–∞–¥–∞—Ç—å":
        context.user_data['awaiting_topic'] = True
        await update.message.reply_text(
            "–û —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≥–∞–¥–∞—Ç—å? –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é —Ç–µ–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ª—é–±–æ–≤—å', '—Ä–∞–±–æ—Ç–∞', '–¥–µ–Ω—å–≥–∏' ‚ú®"
        )

    elif user_text == "üé± –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ —à–∞—Ä–µ":
        answers = [
            "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî –¥–∞! ‚úÖ",
            "–ú–æ–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç ‚Äî –Ω–µ—Ç ‚ùå",
            "–®–∞–Ω—Å—ã –Ω–µ–≤–µ–ª–∏–∫–∏... –Ω–æ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ üåô",
            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞! üåü",
            "–õ—É—á—à–µ –Ω–µ —Å—Ç–æ–∏—Ç üö´",
            "–î–∞, –Ω–æ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω ‚ö†Ô∏è",
            "–ù–µ—Ç, –∏ —ç—Ç–æ –∫ –ª—É—á—à–µ–º—É üí´"
        ]
        answer = random.choice(answers)
        await update.message.reply_text(f"üé± {answer}")

    elif user_text == "üÉè –¢–∞—Ä–æ":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –¢–∞—Ä–æ —Ö–æ—á–µ—à—å –≤—ã—Ç—è–Ω—É—Ç—å:",
            reply_markup=get_tarot_keyboard()
        )

    elif user_text == "‚ôä –ì–æ—Ä–æ—Å–∫–æ–ø":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
            reply_markup=get_zodiac_keyboard()
        )

    elif user_text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )

    elif user_text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        help_text = (
            "–Ø –º–æ–≥—É:\n"
            "üîÆ –ü–æ–≥–∞–¥–∞—Ç—å - –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É\n"
            "üé± –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ —à–∞—Ä–µ - –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç\n"
            "üÉè –¢–∞—Ä–æ - –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ (1 –∏–ª–∏ 3 –∫–∞—Ä—Ç—ã)\n"
            "‚ôä –ì–æ—Ä–æ—Å–∫–æ–ø - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!"
        )
        await update.message.reply_text(help_text)

def main():
    app = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("debug", debug_command))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app.run_polling()

if __name__ == "__main__":
    main()